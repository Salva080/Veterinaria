/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vistas;

import controlador.ClienteData;
import controlador.MascotaData;
import java.util.ArrayList;
import javax.swing.table.DefaultTableModel;
import modelo.Cliente;
import modelo.Conexion;
import modelo.Mascota;

/**
 *
 * @author salva
 */
public class ViewListadoMascotas extends javax.swing.JInternalFrame {
    
    Conexion conexion = new Conexion();
    private ArrayList<Mascota> listaMascotaA;
    private ArrayList<Mascota> listaMascotaB;
    private MascotaData md;
    private DefaultTableModel model;

    /**
     * Creates new form ViewListadoMascotas
     */
    public ViewListadoMascotas() {
        initComponents();
        
        md = new MascotaData(conexion);

        conexion = new Conexion();
        
        listaMascotaA = (ArrayList<Mascota>) md.listarMascotasActivas();
        listaMascotaB = (ArrayList<Mascota>) md.listarMascotasInactivas();
        
        model = new DefaultTableModel();
        armarCabeceraTabla();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tMascotas = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        rbActivas = new javax.swing.JRadioButton();
        rbNoActivas = new javax.swing.JRadioButton();
        jbSalir = new javax.swing.JButton();

        setResizable(true);
        getContentPane().setLayout(null);

        tMascotas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Alias", "Sexo", "Especie", "Raza", "Color de pelaje", "Fecha de nacimiento", "Peso de mascota", "Estado", "Peso actual de mascota"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, true, true, true, true, true, true, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tMascotas.setAutoscrolls(false);
        jScrollPane1.setViewportView(tMascotas);
        if (tMascotas.getColumnModel().getColumnCount() > 0) {
            tMascotas.getColumnModel().getColumn(0).setResizable(false);
        }

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(30, 130, 1377, 187);

        jLabel1.setFont(new java.awt.Font("Sylfaen", 0, 36)); // NOI18N
        jLabel1.setText("LISTADO DE MASCOTAS");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(450, 20, 420, 48);

        rbActivas.setText("activas");
        rbActivas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbActivasActionPerformed(evt);
            }
        });
        getContentPane().add(rbActivas);
        rbActivas.setBounds(490, 80, 80, 28);

        rbNoActivas.setText("no Activas");
        rbNoActivas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbNoActivasActionPerformed(evt);
            }
        });
        getContentPane().add(rbNoActivas);
        rbNoActivas.setBounds(720, 80, 91, 28);

        jbSalir.setText("SALIR");
        jbSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbSalirActionPerformed(evt);
            }
        });
        getContentPane().add(jbSalir);
        jbSalir.setBounds(610, 340, 64, 32);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void rbActivasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbActivasActionPerformed
        // TODO add your handling code here:
        rbNoActivas.setSelected(false);
        borrarFilasTabla();
        cargarDatosActivos();
    }//GEN-LAST:event_rbActivasActionPerformed

    private void rbNoActivasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbNoActivasActionPerformed
        // TODO add your handling code here:
        rbActivas.setSelected(false);
        borrarFilasTabla();
        cargarDatosInactivas();
    }//GEN-LAST:event_rbNoActivasActionPerformed

    private void jbSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbSalirActionPerformed
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_jbSalirActionPerformed

    private void cargarDatosActivos(){
        
        borrarFilasTabla();
        
        ArrayList<Mascota> lista = (ArrayList) md.listarMascotasActivas();
        
        for (Mascota m : lista){
            model.addRow(new Object[] {m.getIdMascota(), m.getAlias(), m.getSexo(), m.getEspecie(), m.getRaza(), m.getColorPelaje(), m.getFechaNac(), m.getPesoMascota(), m.isActivo(),  m.getPesoActual()});
        }
    }
    
    private void cargarDatosInactivas(){
        borrarFilasTabla();
        
        ArrayList<Mascota> lista = (ArrayList) md.listarMascotasInactivas();
        
        for (Mascota m : lista){
            model.addRow(new Object[] {m.getIdMascota(), m.getAlias(), m.getSexo(), m.getEspecie(), m.getRaza(), m.getColorPelaje(), m.getFechaNac(), m.getPesoMascota(), m.isActivo(), m.getPesoActual()});
        }
    }
    
    private void armarCabeceraTabla() {

        //Titulos de Columnas
        ArrayList<Object> columnas = new ArrayList<Object>();
        columnas.add("ID");
        columnas.add("Alias");
        columnas.add("Sexo");
        columnas.add("Especie");
        columnas.add("Raza");
        columnas.add("Color de pelaje");
        columnas.add("Fecha de Nacimiento");
        columnas.add("Peso de mascota");
        columnas.add("Estado");
        columnas.add("Peso actual de mascota");

        for (Object it : columnas) {

            model.addColumn(it);
        }
        tMascotas.setModel(model);
    }
    
    private void borrarFilasTabla() {

        int a = model.getRowCount() - 1;

        for (int i = a; i >= 0; i--) {

            model.removeRow(i);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jbSalir;
    private javax.swing.JRadioButton rbActivas;
    private javax.swing.JRadioButton rbNoActivas;
    private javax.swing.JTable tMascotas;
    // End of variables declaration//GEN-END:variables
}
